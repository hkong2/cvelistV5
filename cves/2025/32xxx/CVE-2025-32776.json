{
    "dataType": "CVE_RECORD",
    "dataVersion": "5.1",
    "cveMetadata": {
        "cveId": "CVE-2025-32776",
        "assignerOrgId": "a0819718-46f1-4df5-94e2-005712e83aaa",
        "state": "PUBLISHED",
        "assignerShortName": "GitHub_M",
        "dateReserved": "2025-04-10T12:51:12.278Z",
        "datePublished": "2025-04-15T16:32:20.628Z",
        "dateUpdated": "2025-04-15T16:32:20.628Z"
    },
    "containers": {
        "cna": {
            "title": "OpenRazer Vulnerable to Out of Bounds Read",
            "problemTypes": [
                {
                    "descriptions": [
                        {
                            "cweId": "CWE-125",
                            "lang": "en",
                            "description": "CWE-125: Out-of-bounds Read",
                            "type": "CWE"
                        }
                    ]
                }
            ],
            "metrics": [
                {
                    "cvssV3_1": {
                        "attackComplexity": "LOW",
                        "attackVector": "LOCAL",
                        "availabilityImpact": "NONE",
                        "baseScore": 5.5,
                        "baseSeverity": "MEDIUM",
                        "confidentialityImpact": "HIGH",
                        "integrityImpact": "NONE",
                        "privilegesRequired": "LOW",
                        "scope": "UNCHANGED",
                        "userInteraction": "NONE",
                        "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
                        "version": "3.1"
                    }
                }
            ],
            "references": [
                {
                    "name": "https://github.com/openrazer/openrazer/security/advisories/GHSA-835j-6976-46jx",
                    "tags": [
                        "x_refsource_CONFIRM"
                    ],
                    "url": "https://github.com/openrazer/openrazer/security/advisories/GHSA-835j-6976-46jx"
                },
                {
                    "name": "https://github.com/openrazer/openrazer/issues/2433",
                    "tags": [
                        "x_refsource_MISC"
                    ],
                    "url": "https://github.com/openrazer/openrazer/issues/2433"
                },
                {
                    "name": "https://github.com/openrazer/openrazer/commit/57610511d2548eda66999eaed5aa4517e89d6d39",
                    "tags": [
                        "x_refsource_MISC"
                    ],
                    "url": "https://github.com/openrazer/openrazer/commit/57610511d2548eda66999eaed5aa4517e89d6d39"
                },
                {
                    "name": "https://github.com/openrazer/openrazer/commit/d869abd20995b4931795e1cde54d4ac84d9ca62f",
                    "tags": [
                        "x_refsource_MISC"
                    ],
                    "url": "https://github.com/openrazer/openrazer/commit/d869abd20995b4931795e1cde54d4ac84d9ca62f"
                }
            ],
            "affected": [
                {
                    "vendor": "openrazer",
                    "product": "openrazer",
                    "versions": [
                        {
                            "version": "< 3.10.2",
                            "status": "affected"
                        }
                    ]
                }
            ],
            "providerMetadata": {
                "orgId": "a0819718-46f1-4df5-94e2-005712e83aaa",
                "shortName": "GitHub_M",
                "dateUpdated": "2025-04-15T16:32:20.628Z"
            },
            "descriptions": [
                {
                    "lang": "en",
                    "value": "OpenRazer is an open source driver and user-space daemon to control Razer device lighting and other features on GNU/Linux. By writing specially crafted data to the `matrix_custom_frame` file, an attacker can cause the custom kernel driver to read more bytes than provided by user space. This data will be written into the RGB arguments which will be sent to the USB device. This issue has been patched in v3.10.2."
                }
            ],
            "source": {
                "advisory": "GHSA-835j-6976-46jx",
                "discovery": "UNKNOWN"
            }
        }
    }
}